group 'dmnlk'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: "war"


buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE")
        classpath("org.springframework:springloaded:1.2.5.RELEASE")
    }
}

apply plugin: 'java'
apply plugin: 'spring-boot'
apply plugin: 'idea'

jar {
    baseName = 'blockimo'
    manifest {
        attributes 'Main-Class': 'com.dmnlk.blockimo.Application'
    }
}


war {
    baseName = "blockimo"
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

configurations {
    domaGenRuntime
}

repositories {
    jcenter()
}

springBoot {
    mainClass = "com.dmnlk.blockimo.Application"
}

bootRun {
        args '--debug'
}

processResources.destinationDir = compileJava.destinationDir
compileJava.dependsOn processResources

dependencies {

    def jdbcDriver = "mysql:mysql-connector-java"
    def domaVersion = "2.12.1"

    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework:spring-jdbc")
    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.springframework.boot:spring-boot-starter-batch")
    compile("org.thymeleaf:thymeleaf-spring4")
    compile("mysql:mysql-connector-java")
    compile("org.seasar.doma:doma:${domaVersion}")
    compile("org.apache.commons:commons-lang3:3.1")
    compile("org.springframework.boot:spring-boot-devtools")
    compile("org.twitter4j:twitter4j-core:4.0.4")
    compile("org.apache.commons:commons-collections4:4.0")
    compile("org.apache.commons:commons-lang3:3.4")
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.8.7")
    providedCompile "org.projectlombok:lombok:1.16.4"
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    // for Doma-Gen
    domaGenRuntime("org.seasar.doma:doma-gen:${domaVersion}")
    domaGenRuntime("${jdbcDriver}")
}


// for Doma-Gen
task domaGen << {
    // まず変更が必要なもの
    def rootPackageName  = 'com.dmnlk.blockimo'
    def daoPackagePath   = 'src/main/java/com/dmnlk/blockimo/dao'
    def dbUrl            = 'jdbc:mysql://133.242.187.54/blockimo'
    def dbUser           = 'user'
    def dbPassword       = 'Se1k1ma2'
    def tableNamePattern = '.*'
    // おそらく変更不要なもの
    def importOfComponentAndAutowiredDomaConfig = "${rootPackageName}.util.doma.ComponentAndAutowiredDomaConfig"
    def workDirPath      = 'work'
    def workDaoDirPath   = "${workDirPath}/dao"

    // 作業用ディレクトリを削除する
    clearDir("${workDirPath}")

    // 現在の Dao インターフェースのバックアップを取得する
    copy() {
        from "${daoPackagePath}"
        into "${workDaoDirPath}/org"
    }

    // Dao インターフェース、Entity クラスを生成する
    ant.taskdef(resource: 'domagentask.properties',
            classpath: configurations.domaGenRuntime.asPath)
    ant.gen(url: "${dbUrl}", user: "${dbUser}", password: "${dbPassword}", tableNamePattern: "${tableNamePattern}") {
        entityConfig(packageName: "${rootPackageName}.entity", useListener: false)
        daoConfig(packageName: "${rootPackageName}.dao")
        sqlConfig()
    }

    // 生成された Dao インターフェースを作業用ディレクトリにコピーし、
    // @ComponentAndAutowiredDomaConfig アノテーションを付加する
    copy() {
        from "${daoPackagePath}"
        into "${workDaoDirPath}/replace"
        filter {
            line -> line.replaceAll('import org.seasar.doma.Dao;', "import ${importOfComponentAndAutowiredDomaConfig};\nimport org.seasar.doma.Dao;")
                    .replaceAll('@Dao', '@Dao\n@ComponentAndAutowiredDomaConfig')
        }
    }

    // @ComponentAndAutowiredDomaConfig アノテーションを付加した Dao インターフェースを
    // dao パッケージへ戻す
    copy() {
        from "${workDaoDirPath}/replace"
        into "${daoPackagePath}"
    }

    // 元々 dao パッケージ内にあったファイルを元に戻す
    copy() {
        from "${workDaoDirPath}/org"
        into "${daoPackagePath}"
    }

    // 作業用ディレクトリを削除する
    clearDir("${workDirPath}")

}

void clearDir(String dirPath) {
    delete dirPath
}